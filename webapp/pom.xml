<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.ccri.stealth</groupId>
        <artifactId>stealth</artifactId>
        <version>2.0.2</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>stealth-webapp</artifactId>
    <packaging>war</packaging>

    <build>
        <finalName>${app.context}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources-filter</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/non-packaged-resources</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/non-packaged-resources-filter</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <classifier>${stealth.classifier}</classifier>
                    <archive>
                        <manifest>
                            <mainClass>Runner</mainClass>
                        </manifest>
                    </archive>
                    <webResources>
                        <resource>
                            <directory>src/main/webResources-filter</directory>
                            <filtering>true</filtering>
                        </resource>
                    </webResources>
                </configuration>
                <executions>
                    <execution>
                        <id>prepare-war</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <stopKey>foo</stopKey>
                    <stopPort>9999</stopPort>
                    <useTestScope>true</useTestScope>
                    <useTestClasspath>true</useTestClasspath>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <webApp>
                        <contextPath>${app.context.path}</contextPath>
                        <baseResource implementation="org.eclipse.jetty.util.resource.ResourceCollection">
                            <resourcesAsCSV>${project.build.directory}/${project.build.finalName}</resourcesAsCSV>
                        </baseResource>
                        <maxFormContentSize>500000</maxFormContentSize>
                        <allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
                    </webApp>
                    <connectors>
                        <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                            <port>${jetty.port}</port>
                            <maxIdleTime>60000</maxIdleTime>
                        </connector>
                        <!-- Look at src/test/resources/certs.sh for how these stores and client certs are created. -->
                        <connector implementation="org.eclipse.jetty.server.ssl.SslSelectChannelConnector">
                            <port>${jetty.ssl.port}</port>
                            <maxIdleTime>60000</maxIdleTime>
                            <keystore>${security.keystore.path}</keystore>
                            <keystoreType>${security.keystore.type}</keystoreType>
                            <password>${security.keystore.password}</password>
                            <keyPassword>${security.keystore.keyPassword}</keyPassword>
                            <truststore>${security.truststore.path}</truststore>
                            <trustPassword>${security.truststore.password}</trustPassword>
                            <wantClientAuth>false</wantClientAuth>
                            <needClientAuth>true</needClientAuth>
                        </connector>
                    </connectors>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.1.6</version>
                <executions>
                    <execution>
                        <id>compile-scala</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                    <execution>
                        <id>test-compile-scala</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <phase>test-compile</phase>
                    </execution>
                </executions>
                <configuration>
                    <recompileMode>incremental</recompileMode>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>grunt-build</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <echo>**** GRUNT ****</echo>
                                <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" resultproperty="cmdresult">
                                    <arg line="/c node.exe ${uidir.pathname}/node_modules/grunt-cli/bin/grunt --force ${grunt.target}" />
                                </exec>
                                <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" resultproperty="cmdresult">
                                    <arg line="-c '${nodejs.local.dir}/bin/node ${uidir.pathname}/node_modules/grunt-cli/bin/grunt ${grunt.target}'" />
                                </exec>

                                <condition property="cmdsuccess">
                                    <equals arg1="${cmdresult}" arg2="0" />
                                </condition>
                                <fail unless="cmdsuccess" />
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
        </dependency>
        <dependency>
            <groupId>io.spray</groupId>
            <artifactId>spray-json_2.10</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scalatra</groupId>
            <artifactId>scalatra_2.10</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scalatra</groupId>
            <artifactId>scalatra-scalate_2.10</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scalatra</groupId>
            <artifactId>scalatra-auth_2.10</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlets</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2_2.10</artifactId>
        </dependency>
        <!-- Adding Spring Security -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>install-nodejs</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>2.5</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>${nodejs.local.dir}</directory>
                                </fileset>
                                <fileset>
                                    <directory>${uidir.pathname}</directory>
                                    <includes>
                                        <include>node.exe</include>
                                    </includes>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>extract-nodejs</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <outputDirectory>${uidir.pathname}</outputDirectory>
                                            <groupId>nodejs</groupId>
                                            <artifactId>node</artifactId>
                                            <classifier>${nodejs.classifier}</classifier>
                                            <type>zip</type>
                                            <includes>node-v*/**</includes>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>nodejs-rename</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target>
                                        <move file="${uidir.pathname}/node-${nodejs.version}-${nodejs.classifier}" tofile="${nodejs.local.dir}" failonerror="false" />
                                        <chmod dir="${nodejs.local.dir}" includes="**/bin/*" perm="755" />
                                        <copy file="${nodejs.local.dir}/node.exe" tofile="${uidir.pathname}/node.exe" overwrite="true" failonerror="false" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>pack-ui</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>2.5</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>src/main/ui/node_modules</directory>
                                </fileset>
                                <fileset>
                                    <directory>src/main/ui/vendor/bower</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.4</version>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/assembly/npm.xml</descriptor>
                                <descriptor>src/main/assembly/bower.xml</descriptor>
                            </descriptors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>npm-bower-install</id>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <target>
                                        <!-- We needed the cache clearing once when a dep released a corrupt version. -->
                                        <!-- However, it's a huge waste of time to dowload everything for every pack-ui build. -->
                                        <!--echo>**** NPM CACHE CLEAR ****</echo>
                                        <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                            <arg line="/c ${uidir.pathname}/nodejs/npm.cmd cache clear" />
                                        </exec>
                                        <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                            <arg line="-c '${nodejs.local.dir}/bin/node ${nodejs.local.dir}/lib/node_modules/npm/bin/npm-cli.js cache clear'" />
                                        </exec-->
                                        <echo>**** NPM INSTALL ****</echo>
                                        <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                            <arg line="/c ${uidir.pathname}/nodejs/npm.cmd install" />
                                        </exec>
                                        <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                            <arg line="-c '${nodejs.local.dir}/bin/node ${nodejs.local.dir}/lib/node_modules/npm/bin/npm-cli.js install'" />
                                        </exec>
                                        <!--echo>**** BOWER CACHE CLEAN ****</echo>
                                        <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                            <arg line="/c node.exe ${uidir.pathname}/node_modules/bower/bin/bower cache clean" />
                                        </exec>
                                        <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                            <arg line="-c '${nodejs.local.dir}/bin/node ${uidir.pathname}/node_modules/bower/bin/bower cache clean'" />
                                        </exec-->
                                        <echo>**** BOWER INSTALL ****</echo>
                                        <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                            <arg line="/c node.exe ${uidir.pathname}/node_modules/bower/bin/bower install" />
                                        </exec>
                                        <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                            <arg line="-c '${nodejs.local.dir}/bin/node ${uidir.pathname}/node_modules/bower/bin/bower install'" />
                                        </exec>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>unpack-ui</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>2.5</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>src/main/ui/node_modules</directory>
                                </fileset>
                                <fileset>
                                    <directory>src/main/ui/vendor/bower</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>extract-js-dependencies</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <outputDirectory>src/main/ui</outputDirectory>
                                            <groupId>com.ccri.stealth</groupId>
                                            <artifactId>stealth-webapp</artifactId>
                                            <classifier>npm</classifier>
                                            <type>zip</type>
                                        </artifactItem>
                                        <artifactItem>
                                            <outputDirectory>src/main/ui/vendor</outputDirectory>
                                            <groupId>com.ccri.stealth</groupId>
                                            <artifactId>stealth-webapp</artifactId>
                                            <classifier>bower</classifier>
                                            <type>zip</type>
                                        </artifactItem>
                                        <artifactItem>
                                            <outputDirectory>${uidir.pathname}/node_modules/karma-phantomjs-launcher/node_modules/phantomjs/lib</outputDirectory>
                                            <groupId>phantomjs</groupId>
                                            <artifactId>phantomjs</artifactId>
                                            <classifier>${phantomjs.classifier}</classifier>
                                            <type>zip</type>
                                            <includes>phantomjs-*/**</includes>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>phantomjs-rename</id>
                                <phase>process-resources</phase>
                                <configuration>
                                    <target>
                                        <move file="${uidir.pathname}/node_modules/karma-phantomjs-launcher/node_modules/phantomjs/lib/phantomjs-${phantomjs.version}-${phantomjs.classifier}" tofile="${phantomjs.local.dir}" />
                                        <chmod dir="${uidir.pathname}/node_modules" includes="**/bin/*" perm="755" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>production</id>
            <properties>
                <grunt.target>--target=prod</grunt.target>
            </properties>
        </profile>

        <profile>
            <id>standalone</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>jetty-classpath</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <configuration>
                                    <includeGroupIds>org.eclipse.jetty,javax.servlet,com.typesafe</includeGroupIds>
                                    <excludeArtifactIds>jsp-api,jstl,akka-actor_2.10</excludeArtifactIds>
                                    <excludes>META-INF/ECLIPSEF.*</excludes>
                                    <outputDirectory>
                                        ${project.build.directory}/${project.build.finalName}
                                    </outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>main-class-placement</id>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <tasks>
                                        <copy todir="${project.build.directory}/${project.build.finalName}/">
                                            <fileset dir="${project.build.directory}/classes/">
                                                <include name="Runner.class" />
                                                <include name="reference.conf" />
                                            </fileset>
                                        </copy>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>external-auth</id>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources-extauth-filter</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <dependencies>
                <dependency>
                    <groupId>com.ccri.spring</groupId>
                    <artifactId>external-auth</artifactId>
                </dependency>
            </dependencies>
        </profile>

        <!-- Deployment-specific profiles for production systems -->
        <profile>
            <id>ds</id>
            <properties>
                <stealth.classifier>dragonspell</stealth.classifier>
                <app.title>DragonSpell</app.title>
                <classification.text>Dynamic Page - Highest Possible Classification is TOP SECRET//SI//TK//NOFORN</classification.text>
                <classification.level>sci</classification.level>
                <map.initLayers>[]</map.initLayers>
                <map.extraLayers>[]</map.extraLayers>
                <map.liveOptions>[]</map.liveOptions>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ds-dependencies</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <outputDirectory>${project.build.directory}/assets</outputDirectory>
                                            <destFileName>logo.png</destFileName>
                                            <groupId>dragonspell</groupId>
                                            <artifactId>logo</artifactId>
                                            <classifier>web</classifier>
                                            <version>1.0.0</version>
                                            <type>png</type>
                                            <overWrite>true</overWrite>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>thresher</id>
            <properties>
                <stealth.classifier>thresher</stealth.classifier>
                <app.context>thresher</app.context>
                <app.title>Thresher</app.title>
                <app.plugins>
                    [
                        'stealth.air',
                        'stealth.alerts',
                        'stealth.timelapse',
                        'stealth.mediator.air-timelapse'
                    ]
                </app.plugins>
                <classification.text>Dynamic Page - Highest Possible Classification is TOP SECRET//SI//TK//NOFORN</classification.text>
                <classification.level>sci</classification.level>
                <map.initLayers>[]</map.initLayers>
                <map.extraLayers>[]</map.extraLayers>
                <map.liveOptions>[]</map.liveOptions>
                <map.initTint>0</map.initTint>
                <map.click.search.strategy>nearest-fixed-1</map.click.search.strategy>
                <geoserver.url>/geoserver</geoserver.url>
                <geoserver.omitProxy>true</geoserver.omitProxy>
            </properties>
        </profile>
        <profile>
            <id>skyquest</id>
            <properties>
                <stealth.classifier>skyquest</stealth.classifier>
                <app.title>SkyQuest</app.title>
                <app.plugins>
                    [
                        'stealth.timelapse'
                    ]
                </app.plugins>
                <classification.text>Dynamic Page - Highest Possible Classification is TOP SECRET//SI//TK//REL TO USA, FVEY</classification.text>
                <classification.level>sci</classification.level>
                <map.initLayers>[]</map.initLayers>
                <map.extraLayers>[]</map.extraLayers>
                <map.liveOptions>[]</map.liveOptions>
                <map.initTint>0</map.initTint>
                <map.click.search.strategy>nearest-fixed-1</map.click.search.strategy>
                <geoserver.url>/geoserver</geoserver.url>
                <geoserver.omitProxy>true</geoserver.omitProxy>
            </properties>
        </profile>
        <profile>
            <id>tcri</id>
            <properties>
                <stealth.classifier>tcri</stealth.classifier>
                <app.plugins>
                    [
                        'stealth.air',
                        'stealth.dcm',
                        'stealth.routeanalysis',
                        'stealth.static',
                        'stealth.timelapse',
                        'stealth.mediator.air-timelapse'
                    ]
                </app.plugins>
                <geoserver.url>/geoserver</geoserver.url>
                <geoserver.omitProxy>true</geoserver.omitProxy>
            </properties>
        </profile>

        <!-- Profiles for always-up demos deployed by CI -->
        <profile>
            <id>jenkins-jboss-ci</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jboss.as.plugins</groupId>
                        <artifactId>jboss-as-maven-plugin</artifactId>
                        <version>7.7.Final</version>
                        <executions>
                            <execution>
                                <phase>install</phase>
                                <goals>
                                    <goal>deploy-only</goal>
                                </goals>
                                <configuration>
                                    <hostname>stealth.ccri.com</hostname>
                                    <port>9999</port>
                                    <username>root</username>
                                    <password>toor</password>
                                    <afterDeployment>
                                        <commands>
                                            <command>:shutdown(restart=true)</command>
                                        </commands>
                                    </afterDeployment>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>demo1</id>
            <properties>
                <app.context>stealth1</app.context>
                <map.initLayers>[]</map.initLayers>
                <map.extraLayers>[]</map.extraLayers>
                <map.liveOptions>[]</map.liveOptions>
            </properties>
        </profile>
        <profile>
            <id>demo2</id>
            <properties>
                <app.context>stealth2</app.context>
                <map.initLayers>[]</map.initLayers>
                <map.extraLayers>[]</map.extraLayers>
                <map.liveOptions>[]</map.liveOptions>
            </properties>
        </profile>

        <!-- The remaining profiles are auto-activated based on OS.  No reason to explicitly activate them. -->
        <profile>
            <id>macos-x86</id>
            <activation>
                <os>
                    <family>mac</family>
                    <arch>x86</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>darwin-x86</nodejs.classifier>
                <phantomjs.classifier>macosx</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>macos-x64</id>
            <activation>
                <os>
                    <family>mac</family>
                    <arch>x86_64</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>darwin-x64</nodejs.classifier>
                <phantomjs.classifier>macosx</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>win-x86</id>
            <activation>
                <os>
                    <family>windows</family>
                    <arch>x86</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>win-x86</nodejs.classifier>
                <phantomjs.classifier>windows</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>win-x64</id>
            <activation>
                <os>
                    <family>windows</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>win-x64</nodejs.classifier>
                <phantomjs.classifier>windows</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>linux-x86</id>
            <activation>
                <os>
                    <family>linux</family>
                    <arch>x86</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>linux-x86</nodejs.classifier>
                <phantomjs.classifier>linux-x86_64</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>linux-x86-386</id>
            <activation>
                <os>
                    <family>linux</family>
                    <arch>i386</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>linux-x86</nodejs.classifier>
                <phantomjs.classifier>linux-i686</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>linux-x86-686</id>
            <activation>
                <os>
                    <family>linux</family>
                    <arch>i686</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>linux-x86</nodejs.classifier>
                <phantomjs.classifier>linux-i686</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>linux-x64-x86_64</id>
            <activation>
                <os>
                    <family>linux</family>
                    <arch>x86_64</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>linux-x64</nodejs.classifier>
                <phantomjs.classifier>linux-x86_64</phantomjs.classifier>
            </properties>
        </profile>
        <profile>
            <id>linux-x64-amd64</id>
            <activation>
                <os>
                    <family>linux</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <nodejs.classifier>linux-x64</nodejs.classifier>
                <phantomjs.classifier>linux-x86_64</phantomjs.classifier>
            </properties>
        </profile>
    </profiles>
</project>
