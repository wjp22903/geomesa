{// http://eslint.org/docs/rules/
    "ecmaFeatures": {
        "arrowFunctions": false,                    // enable arrow functions
        "binaryLiterals": false,                    // enable binary literals
        "blockBindings": false,                     // enable let and const (aka block bindings)
        "classes": false,                           // enable classes
        "defaultParams": false,                     // enable default function parameters
        "destructuring": false,                     // enable destructuring
        "forOf": false,                             // enable for-of loops
        "generators": false,                        // enable generators
        "modules": false,                           // enable modules and global strict mode
        "objectLiteralComputedProperties": false,   // enable computed object literal property names
        "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
        "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
        "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
        "octalLiterals": false,                     // enable octal literals
        "regexUFlag": false,                        // enable the regular expression u flag
        "regexYFlag": false,                        // enable the regular expression y flag
        "restParams": false,                        // enable the rest parameters
        "spread": false,                            // enable the spread operator for arrays
        "superInFunctions": false,                  // enable super references inside of functions
        "templateStrings": false,                   // enable template strings
        "unicodeCodePointEscapes": false,           // enable code point escapes
        "globalReturn": false,                      // allow return statements in the global scope
        "jsx": false,                               // enable JSX
        "experimentalObjectRestSpread": false       // enable support for the experimental object rest/spread properties
    },

    "env": {
        "browser": true,         // browser global variables.
        "node": false,           // Node.js global variables and Node.js-specific rules.
        "worker": false,         // web workers global variables
        "amd": false,            // defines require() and define() as global variables as per the amd spec.
        "mocha": false,          // adds all of the Mocha testing global variables.
        "jasmine": false,        // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "jest": false,           // Jest global virables.
        "phantomjs": false,      // phantomjs global variables.
        "qunit": false,          // QUnit global variables.
        "jquery": true,          // jquery global variables.
        "prototypejs": false,    // prototypejs global variables.
        "shelljs": false,        // shelljs global variables.
        "meteor": false,         // Meteor global variables.
        "mongo": false,          // MongoDB global variables.
        "applescript": false,    // AppleScript global variables.
        "serviceworker": false,  // Service Worker global variables.
        "embertest": false,      // Ember test helper globals.
        "es6": false             // enable all ECMAScript 6 features except for modules.
    },

    "globals": {
        "_": false,
        "angular": false,
        "bowser": false,
        "CanvasPixelArray": false,
        "d3": false,
        "dcodeIO": false,
        "FileReaderJS": false,
        "math": false,
        "moment": false,
        "ol": false,
        "OpenLayers": false,
        "Popup": false,
        "saveAs": false,
        "sonic": false,
        "stealth": false
    },

    "plugins": [
    ],

    "rules": {
        ////////// Possible Errors //////////
        "comma-dangle": 2,              // disallow or enforce trailing commas in object literals
        "no-cond-assign": 2,            // disallow assignment in conditional expressions
        "no-console": 0,                // disallow use of console (off by default in the node environment)
        "no-constant-condition": 0,     // disallow use of constant expressions in conditions
        "no-control-regex": 2,          // disallow control characters in regular expressions
        "no-debugger": 2,               // disallow use of debugger
        "no-dupe-args": 2,              // disallow duplicate arguments in functions
        "no-dupe-keys": 2,              // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2,         // disallow a duplicate case label
        "no-empty-character-class": 2,  // disallow the use of empty character classes in regular expressions
        "no-empty": 2,                  // disallow empty statements
        "no-ex-assign": 2,              // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2,     // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0,           // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2,             // disallow unnecessary semicolons
        "no-func-assign": 2,            // disallow overwriting functions written as function declarations
        "no-inner-declarations": 2,     // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,         // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2,   // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2,         // disallow negation of the left operand of an in expression
        "no-obj-calls": 2,              // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2,           // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2,          // disallow sparse arrays
        "no-unreachable": 2,            // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2,                 // disallow comparisons with the value NaN
        "valid-jsdoc": 0,               // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2,              // Ensure that the results of typeof are compared against a valid string
        "no-unexpected-multiline": 2,   // Avoid code that looks like two expressions but is actually one

        ////////// Best Practices //////////
        "accessor-pairs": 0,        // Enforces getter/setter pairs in objects
        "block-scoped-var": 2,      // treat var statements as if they were block scoped (off by default)
        "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 2,     // require return statements to either always or never specify values
        "curly": 2,                 // specify curly brace conventions for all control statements
        "default-case": 0,          // require default case in switch statements (off by default)
        "dot-notation": 0,          // encourages use of dot notation whenever possible
        "dot-location": 0,          // enforces consistent newlines before or after dots
        "eqeqeq": 2,                // require the use of === and !==
        "guard-for-in": 2,          // make sure for-in loops have an if statement (off by default)
        "no-alert": 2,              // disallow the use of alert, confirm, and prompt
        "no-caller": 2,             // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 2,          // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 0,        // disallow else after a return in an if (off by default)
        "no-empty-label": 2,        // disallow use of labels for anything other then loops and switches
        "no-eq-null": 0,            // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 2,               // disallow use of eval()
        "no-extend-native": 2,      // disallow adding to native types
        "no-extra-bind": 2,         // disallow unnecessary function binding
        "no-fallthrough": 0,        // disallow fallthrough of case statements
        "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implicit-coercion": 0,  // disallow the type conversions with shorter notations
        "no-implied-eval": 2,       // disallow use of eval()-like methods
        "no-invalid-this": 2,       // disallow this keywords outside of classes or class-like objects
        "no-iterator": 2,           // disallow usage of __iterator__ property
        "no-labels": 2,             // disallow use of labeled statements
        "no-lone-blocks": 2,        // disallow unnecessary nested blocks
        "no-loop-func": 2,          // disallow creation of functions within loops
        "no-multi-spaces": [2, {    // disallow use of multiple spaces
            "exceptions": {
                "AssignmentExpression": true,
                "VariableDeclarator": true
            }
        }],
        "no-multi-str": 0,          // disallow use of multiline strings
        "no-native-reassign": 2,    // disallow reassignments of native objects
        "no-new-func": 2,           // disallow use of new operator for Function object
        "no-new-wrappers": 2,       // disallows creating new instances of String, Number, and Boolean
        "no-new": 2,                // disallow use of new operator when not part of the assignment or comparison
        "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal": 0,              // disallow use of octal literals
        "no-process-env": 2,        // disallow use of process.env (off by default)
        "no-proto": 2,              // disallow usage of __proto__ property
        "no-redeclare": 2,          // disallow declaring the same variable more then once
        "no-return-assign": 2,      // disallow use of assignment in return statement
        "no-script-url": 2,         // disallow use of javascript: urls.
        "no-self-compare": 2,       // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 0,          // disallow use of comma operator
        "no-throw-literal": 2,      // restrict what can be thrown as an exception
        "no-unused-expressions": 2, // disallow usage of expressions in statement position
        "no-useless-call": 2,       // disallow unnecessary .call() and .apply()
        "no-void": 0,               // disallow use of void operator (off by default)
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 2,               // disallow use of the with statement
        "radix": 2,                 // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 0,                  // require or disallow Yoda conditions

        ////////// Strict Mode //////////
        "strict": 0,          // controls location of Use Strict Directives

        ////////// Variables //////////
        "init-declarations": 0,                                 // enforce or disallow variable initializations at definition
        "no-catch-shadow": 2,                                   // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 2,                                     // disallow deletion of variables
        "no-label-var": 2,                                      // disallow labels that share a name with a variable
        "no-shadow-restricted-names": 2,                        // disallow shadowing of names such as arguments
        "no-shadow": 0,                                         // disallow declaration of variables already declared in the outer scope
        "no-undef-init": 2,                                     // disallow use of undefined when initializing variables
        "no-undef": 2,                                          // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undefined": 0,                                      // disallow use of undefined variable (off by default)
        "no-unused-vars": [2, {"vars": "all", "args": "all"}],  // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0,                              // disallow use of variables before they are defined

        ////////// Stylistic Issues //////////
        "array-bracket-spacing": 2,                               // enforce spacing inside array brackets
        "brace-style": [2, "1tbs", {"allowSingleLine": true}],    // enforce one true brace style (off by default)
        "camelcase": 0,                                           // require camel case names
        "comma-spacing": 2,                                       // enforce spacing before and after comma
        "comma-style": 2,                                         // enforce one true comma style (off by default)
        "computed-property-spacing": 2,                           // require or disallow padding inside computed properties
        "consistent-this": 0,                                     // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 2,                                            // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,                                          // require function expressions to have a name (off by default)
        "func-style": 0,                                          // enforces use of function declarations or expressions (off by default)
        "id-length": 0,                                           // this option enforces minimum and maximum identifier lengths (variable names, property names etc.) (off by default)
        "id-match": 0,                                            // require identifiers to match the provided regular expression
        "indent": 0,                                              // specify tab or space width for your code
        "key-spacing": 2,                                         // enforces spacing between keys and values in object literal properties
        "lines-around-comment": 0,                                // enforce empty lines around comments
        "linebreak-style": 2,                                     // disallow mixed 'LF' and 'CRLF' as linebreaks
        "max-nested-callbacks": 0,                                // specify the maximum depth callbacks can be nested (off by default)
        "new-cap": 2,                                             // require a capital letter for constructors
        "new-parens": 2,                                          // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0,                                   // require or disallow an empty newline after variable declarations
        "no-array-constructor": 2,                                // disallow use of the Array constructor
        "no-continue": 0,                                         // disallow use of the continue statement
        "no-inline-comments": 0,                                  // disallow comments inline after code (off by default)
        "no-lonely-if": 2,                                        // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 2,                            // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": 2,                             // disallow multiple empty lines (off by default)
        "no-nested-ternary": 0,                                   // disallow nested ternary expressions (off by default)
        "no-new-object": 2,                                       // disallow use of the Object constructor
        "no-spaced-func": 2,                                      // disallow space between function identifier and application
        "no-ternary": 0,                                          // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 2,                                  // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0,                                // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 2,                                 // disallow the use of Boolean literals in conditional expressions
        "object-curly-spacing": 2,                                // require or disallow padding inside curly braces
        "one-var": 0,                                             // require or disallow one variable declaration per function
        "operator-assignment": 2,                                 // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": [2, "after",                        // enforce operators to be placed before or after line breaks
            {"overrides": {"?": "after", ":": "after"}}],
        "padded-blocks": [2, "never"],                            // enforce padding within blocks (off by default)
        "quote-props": 0,                                         // require quotes around object literal property names (off by default)
        "quotes": 0,                                              // specify whether double or single quotes should be used
        "semi-spacing": 2,                                        // enforce spacing before or after semicolons
        "semi": 2,                                                // require or disallow use of semicolons instead of ASI
        "sort-vars": 0,                                           // sort variables within the same declaration block (off by default)
        "space-after-keywords": 2,                                // require a space after certain keywords (off by default)
        "space-before-blocks": 2,                                 // require or disallow space before blocks (off by default)
        "space-before-function-paren": 2,                         // require or disallow a space before function opening parenthesis
        "space-in-parens": 2,                                     // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 0,                                     // require spaces around operators
        "space-return-throw-case": 2,                             // require a space after return, throw, and case
        "space-unary-ops": 2,                                     // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": 0,                                      // require or disallow a space immediately following the // in a line comment (off by default)
        "wrap-regex": 0,                                          // require regex literals to be wrapped in parentheses (off by default)

        ////////// ECMAScript 6 //////////
        "no-var": 0,          // require let or const instead of var (off by default)
        "generator-star": 0,  // enforce the position of the * in generator functions (off by default)

        ////////// Legacy //////////
        "max-depth": 0,       // specify the maximum depth that blocks can be nested (off by default)
        "max-len": 0,         // specify the maximum length of a line in your program (off by default)
        "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": 0,  // specify the maximum number of statement allowed in a function (off by default)
        "no-bitwise": 0,      // disallow use of bitwise operators (off by default)
        "no-plusplus": 0,     // disallow use of unary operators, ++ and -- (off by default)

        ////////// Custom Rules //////////
        "indent-with-exceptions": [2, 4, {"SwitchCase": 1}]  // takes the place of "indent". allows no indent for angular injection lists
    }
}
