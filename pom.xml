<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>darwin</groupId>
    <artifactId>darwin</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>war</packaging>

    <properties>
        <scalatra.version>2.2.0</scalatra.version>
        <slf4j.version>1.7.2</slf4j.version>
        <spray-json.version>1.2.3</spray-json.version>
        <scala.version>2.10.0</scala.version>
        <joda-time.version>2.1</joda-time.version>
        <joda-convert.version>1.2</joda-convert.version>
        <guava.version>14.0.1</guava.version>
        <jsr305.version>1.3.9</jsr305.version>
        <uidir.pathname>${project.basedir}/src/main/ui</uidir.pathname>
    </properties>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources-filter</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <id>prepare-war</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.0.0.M4</version>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <webApp>
                        <contextPath>/darwin</contextPath>
                        <baseResource implementation="org.eclipse.jetty.util.resource.ResourceCollection">
                            <resourcesAsCSV>${project.basedir}/src/main/webapp,${project.build.directory}/${project.artifactId}-${project.version}</resourcesAsCSV>
                        </baseResource>
                        <maxFormContentSize>500000</maxFormContentSize>
                        <jettyEnvXml>${project.build.outputDirectory}/jetty-env.xml</jettyEnvXml>
                    </webApp>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>sanitized-project-version</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>regex-property</goal>
                        </goals>
                        <configuration>
                            <name>sanitized.project.version</name>
                            <value>${project.version}</value>
                            <regex>(\d)\.(\d)\.(\d+)-(SNAPSHOT)</regex>
                            <replacement>$1_$2_snapshot</replacement>
                            <failIfNoMatch>false</failIfNoMatch>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>compile-scala</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                    <execution>
                        <id>test-compile-scala</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <phase>test-compile</phase>
                    </execution>
                </executions>
                <configuration>
                    <recompileMode>incremental</recompileMode>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>grunt-build</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target name="building">
                                <echo>${project.basedir}
                                    ---------------------------------------------------
                                    -- NPM INSTALL --
                                    ---------------------------------------------------
                                </echo>
                                <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                    <arg line="/c npm install"/>
                                </exec>
                                <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                    <arg line="-c 'npm install'"/>
                                </exec>
                                <echo>${project.basedir}
                                    ---------------------------------------------------
                                    -- BOWER INSTALL --
                                    ---------------------------------------------------
                                </echo>
                                <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows" failonerror="true">
                                    <arg line="/c bower install"/>
                                </exec>
                                <exec executable="bash" dir="${uidir.pathname}" osfamily="unix" failonerror="true">
                                    <arg line="-c 'bower install'"/>
                                </exec>
                                <echo>
                                    ---------------------------------------------------
                                    -- GRUNT --
                                    ---------------------------------------------------
                                </echo>
                                <exec executable="cmd" dir="${uidir.pathname}" osfamily="windows"
                                      resultproperty="cmdresult">
                                    <arg line="/c grunt"/>
                                </exec>
                                <exec executable="bash" dir="${uidir.pathname}" osfamily="unix"
                                      resultproperty="cmdresult">
                                    <arg line="-c 'grunt'"/>
                                </exec>

                                <condition property="cmdsuccess">
                                    <equals arg1="${cmdresult}" arg2="0"/>
                                </condition>
                                <fail unless="cmdsuccess"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>io.spray</groupId>
            <artifactId>spray-json_2.10</artifactId>
            <version>${spray-json.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scalatra</groupId>
            <artifactId>scalatra_2.10</artifactId>
            <version>${scalatra.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scalatra</groupId>
            <artifactId>scalatra-scalate_2.10</artifactId>
            <version>${scalatra.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda-time.version}</version>
        </dependency>
        <dependency>
            <groupId>org.joda</groupId>
            <artifactId>joda-convert</artifactId>
            <version>${joda-convert.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>${jsr305.version}</version>
        </dependency>
    </dependencies>

</project>